////////////////////////////////////////////////////////////////////////////////
//
//  YOUR QUILL
//
////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <tachyon/task/Task.hpp>
#include <tachyon/task/TaskAPI.hpp>
#include <tachyon/task/TaskEngine.hpp>
#include <basic/DelayInit.hpp>

namespace yq::tachyon {

    TaskInfo::TaskInfo(std::string_view name, ObjectInfo&base, const std::source_location& sl) :
        ObjectInfo(name, base, sl)
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void Task::initInfo()
    {
        auto w = writer<Task>();
        w.abstract();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Task::Task()
    {
    }
    
    Task::~Task()
    {
    }
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  TASK API


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  TASK ENGINE

    void    Task::Engine::step()
    {
        API api;
        for(Task* t : m_tasks)
            t->tick(api);
    }
    
    void    Task::Engine::add(Task*tt)
    {
        if(tt){
            m_tasks.push_back(tt);
        }
    }
    
    Task::Engine::Engine()
    {
    }
    
    Task::Engine::~Engine()
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    YQ_INVOKE( Task::initInfo(); )
}


YQ_OBJECT_IMPLEMENT(yq::tachyon::Task)
